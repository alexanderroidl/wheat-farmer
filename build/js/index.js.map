{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/base/browser.ts","src/ts/base/camera.ts","src/ts/base/game.ts","src/ts/base/inventory.ts","src/ts/base/player.ts","src/ts/base/world.ts","src/ts/core/bit-math.ts","src/ts/core/easings.ts","src/ts/core/game-loop.ts","src/ts/core/renderer.ts","src/ts/core/util.ts","src/ts/core/vector.ts","src/ts/entities/enemies/robot.ts","src/ts/index.ts","src/ts/tiles/empty.ts","src/ts/tiles/tile.ts","src/ts/tiles/wheat.ts","src/ts/title-screen/title-screen-load.ts","src/ts/title-screen/title-screen-logo-slide.ts","src/ts/title-screen/title-screen.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import World from \"./world\";\nimport Camera from \"./camera\";\nimport Renderer from \"../core/renderer\";\nimport Vector from \"../core/vector\";\nimport BitMath from \"../core/bit-math\";\n\nexport default class Browser {\n    private _statsDisplay: HTMLDivElement = document.createElement('div');\n\n    private _mouseDown: boolean = false;\n    private _mousePos: Vector = new Vector(0, 0);\n\n    private _oldWindowWidth: number = window.innerWidth;\n    private _oldWindowHeight: number = window.innerHeight;\n\n    get mouseDown (): boolean {\n        return this._mouseDown;\n    }\n\n    get mousePos (): Vector {\n        return this._mousePos;\n    }\n\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    public onScroll = (delta: number): void => {};\n    public onMouseDown = (pos: Vector): void => {};\n    public onMouseUp = (pos: Vector): void => {};\n    public onMouseMove = (pos: Vector): void => {};\n    public onMouseDrag = (pos: Vector): void => {};\n    public onMouseClick = (pos: Vector): void => {};\n    public onResize = (width: number, height: number, oldWidth: number, oldHeight: number): void => {};\n    /* eslint-enable @typescript-eslint/no-empty-function */\n\n    constructor () {\n        this.setupDOM();\n        this.setupEvents();\n    }\n\n    private setupDOM (): void {\n        // Stats display\n        this._statsDisplay.classList.add('gui');\n        this._statsDisplay.classList.add('stats-display');\n\n        // Add everything to DOM\n        document.body.append(this._statsDisplay);\n    }\n\n    private setupEvents (): void {\n        // The flag that determines whether the wheel event is supported\n        let supportsWheel = false;\n\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        // The function that will run when the events are triggered\n        const wheelHandler = (e: any) => {\n            if (e.type == 'wheel') supportsWheel = true;\n            else if (supportsWheel) return;\n\n            const delta = ((e.deltaY || -e.wheelDelta || e.detail) >> 10) || 1;\n            this.onScroll(delta);\n        }\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        // Add the event listeners for each event.\n        document.addEventListener('wheel', wheelHandler);\n        document.addEventListener('mousewheel', wheelHandler);\n        document.addEventListener('DOMMouseScroll', wheelHandler);\n        document.addEventListener('mousedown', (e) => {\n            this._mouseDown = true;\n            this.onMouseDown(new Vector(e.screenX, e.screenY));\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            this._mouseDown = false;\n            this.onMouseUp(new Vector(e.screenX, e.screenY));\n        });\n\n        document.addEventListener('mousemove', (e) => {\n            this._mousePos.x = e.clientX;\n            this._mousePos.y = e.clientY;\n\n            this.onMouseMove(new Vector(e.clientX, e.clientY));\n\n            if (this._mouseDown) {\n                this.onMouseDrag(new Vector(e.clientX, e.clientY));\n            }\n        });\n\n        document.addEventListener('click', (e) => {\n            this.onMouseClick(this._mousePos);\n        });\n\n        window.addEventListener('load', () => {\n            this._oldWindowWidth = window.innerWidth;\n        });\n\n        window.addEventListener('resize', () => {\n            this.onResize(window.innerWidth, window.innerHeight, this._oldWindowWidth, this._oldWindowHeight);\n\n            this._oldWindowWidth = window.innerWidth;\n            this._oldWindowHeight = window.innerHeight;\n        });\n    }\n\n    public getParameter (name: string): string | null {\n        // Source: https://stackoverflow.com/a/5448595/11379072\n\n        let result: string | null = null;\n        let tmp = [];\n\n        location.search\n            .substr(1)\n            .split(\"&\")\n            .forEach(item => {\n                tmp = item.split('=');\n\n                if (tmp[0] === name) {\n                    result = decodeURIComponent(tmp[1]);\n                }\n            });\n\n        return result;\n    }\n\n    private getWorldStatsHTML (world: World): string {\n        return `\n            <strong>Time:</strong> ${BitMath.floor((Date.now() - world.createdAt) / 1000)}s<br>\n            <strong>Seeds:</strong>: ${world.player.items.wheatSeeds}<br>\n            <strong>Wheat:</strong> ${world.player.items.opium}<br>\n            <strong>Money:</strong> ${world.player.items.money} €<br>\n        `;\n    }\n\n    private getCameraDebugHTML (camera: Camera): string {\n        return `\n            <strong>Camera:</strong><br>\n            <strong>X:</strong> ${camera.position.x.toFixed(3)}<br>\n            <strong>Y:</strong> ${camera.position.y.toFixed(3)}<br>\n            <strong>Zoom:</strong> ${camera.zoomAmount.toFixed(3)}\n\n        `;\n    }\n\n    private getMouseDebugHTML (camera: Camera): string {\n        const worldPos = camera.worldPosFromScreen(this._mousePos);\n\n        return `\n            <strong>Mouse${(this._mouseDown ? ' (down)' : '')}:</strong><br>\n            <strong>X:</strong> ${this._mousePos.x}<br>\n            <strong>Y:</strong> ${this._mousePos.y}<br>\n            <strong>World X:</strong> ${worldPos.x.toFixed(3)}<br>\n            <strong>World Y:</strong> ${worldPos.y.toFixed(3)}\n        `;\n    }\n\n    private getRendererDebugHTML (renderer: Renderer): string {\n        const camera = renderer.camera;\n\n        const xStart = BitMath.floor(camera.position.x / (renderer.SQUARE_SIZE * camera.zoomAmount));\n        const xEnd = Math.ceil((camera.position.x + window.innerWidth) / (renderer.SQUARE_SIZE * camera.zoomAmount));\n        const yStart = BitMath.floor(camera.position.y / (renderer.SQUARE_SIZE * camera.zoomAmount));\n        const yEnd = Math.ceil((camera.position.y + window.innerHeight) / (renderer.SQUARE_SIZE * camera.zoomAmount));\n\n        return `\n            <strong>Renderer:</strong><br>\n            <strong>X-start:</strong> ${xStart}<br> \n            <strong>X-end:</strong> ${xEnd}<br>\n            <strong>Y-start:</strong> ${yStart}<br>\n            <strong>Y-end:</strong> ${yEnd}\n        `\n    }\n\n    private getMiscDebugHTML (world: World): string {\n        return `\n            <strong>Tiles/Min:</strong> ${world.tilesPlantedPerMin}\n        `;\n    }\n\n    public renderStats (world: World): void {\n        this._statsDisplay.innerHTML = `<div class=\"gui-item\">${this.getWorldStatsHTML(world)}</div>`;\n    }\n\n    public renderDebug (camera: Camera, renderer: Renderer, world: World): void {\n        const debugHTMLParts = [\n            this.getWorldStatsHTML(world),\n            this.getCameraDebugHTML(camera),\n            this.getMouseDebugHTML(camera),\n            this.getRendererDebugHTML(renderer),\n            this.getMiscDebugHTML(world)\n        ];\n\n        this._statsDisplay.innerHTML = (\n            '<div class=\"gui-item\">' + \n                debugHTMLParts.join('</div><hr><div class=\"gui-item\">') +\n            '</div>'\n        );\n    }\n}","import Vector from \"../core/vector\";\n\nexport default class Camera {\n    public readonly DEFAULT_ZOOM = 1;\n\n    private _position: Vector = new Vector(0, 0);\n    private _zoomAmount: number = this.DEFAULT_ZOOM;\n    private _worldSquareSize: number;\n\n    get position (): Vector {\n        return this._position;\n    }\n\n    get zoomAmount (): number {\n        return this._zoomAmount;\n    }\n\n    get worldSquareSize (): number {\n        return this._worldSquareSize;\n    }\n\n    constructor (worldSquareSize: number) {\n        this._worldSquareSize = worldSquareSize;\n    }\n\n    public setup (worldSize: number): void {\n        const renderedWorldSize = worldSize * this._worldSquareSize * this._zoomAmount;\n\n        this._position = new Vector(\n            -window.innerWidth / 2 + renderedWorldSize / 2,\n            -window.innerHeight / 2 + renderedWorldSize / 2\n        );\n    }\n\n    public move (x: number, y: number): void {\n        this._position = this._position.add(x, y);\n    }\n\n    public zoom (zoom: number): void {\n        if (this._zoomAmount + zoom < 0.2) {\n            this._zoomAmount = 0.2;\n            return;\n        }\n\n        const halfWindowSize = new Vector(window.innerWidth / 2, window.innerHeight / 2);\n\n        const oldPos = this.worldPosFromScreen(halfWindowSize);\n        this._zoomAmount += zoom;\n\n        const newPos = this.worldPosFromScreen(halfWindowSize);\n        this.move(-(newPos.x - oldPos.x) *  this.worldSquareSize * this.zoomAmount, -(newPos.y - oldPos.y) *  this.worldSquareSize * this.zoomAmount);\n    }\n\n    public worldPosFromScreen (screenPos: Vector): Vector {\n        return new Vector(\n            (screenPos.x + this.position.x) / this.worldSquareSize / this._zoomAmount,\n            (screenPos.y + this.position.y) / this.worldSquareSize / this._zoomAmount\n        );\n    }\n}","import GameLoop from \"../core/game-loop\";\nimport Browser from \"./browser\";\nimport World from \"./world\";\nimport Renderer from \"../core/renderer\";\nimport Vector from \"../core/vector\";\n\nexport default class Game {\n    private static readonly MOUSE_MOVE_TRESHOLD = 10;\n    private static _instance: Game;\n\n    private loop: GameLoop = new GameLoop();\n    private renderer: Renderer = new Renderer();\n    private world: World = new World();\n    private browser: Browser = new Browser();\n\n    private _mouseDown: boolean = false;\n    private _lastClickAt: number = Date.now();\n\n    public static get instance (): Game {\n        if (!Game._instance) {\n            Game._instance = new Game();\n        }\n    \n        return Game._instance;\n    }\n\n    constructor () {\n        this.setupLoop();\n        this.setupMouse();\n        this.setupWindow();\n\n        this.renderer.camera.setup(this.world.SIZE);\n    }\n\n    private setupMouse (): void {\n        this.browser.onScroll = (delta: number) => {\n            this.renderer.camera.zoom(-delta / 5)\n        }\n\n        this.browser.onMouseDown = (pos: Vector) => {\n            this._mouseDown = true;\n        }\n\n        this.browser.onMouseUp = (pos: Vector) => {\n            this._mouseDown = false;\n        }\n\n        this.browser.onMouseMove = (pos: Vector) => {\n            this.renderer.mousePos = new Vector(pos.x, pos.y);\n        }\n\n        this.browser.onMouseClick = (pos: Vector) => {\n            if (!this.renderer.titleScreen.hidden) {\n                this.renderer.titleScreen.onClick(pos);\n                this._lastClickAt = Date.now();\n                return;\n            }\n\n            const worldPos = this.renderer.camera.worldPosFromScreen(pos);\n            this.world.onTileClicked(worldPos.floor());\n        };\n    }\n\n    private setupWindow (): void {\n        this.browser.onResize = (width: number, height: number, oldWidth: number, oldHeight: number) => {\n            const deltaW = oldWidth - width;\n            const deltaH = oldHeight - height;\n\n            this.renderer.camera.move(\n                deltaW/2,\n                deltaH/2\n            );\n        };\n    }\n\n    private setupLoop (): void {\n        this.loop.fps = 30;\n        this.loop.update = (delta: number) => {\n            if (this.renderer.titleScreen.hidden) {\n                this.world.update(delta);\n            }\n\n            if (this._mouseDown) {\n                if ((Date.now() - this._lastClickAt) > 250) {\n                    const worldPos = this.renderer.camera.worldPosFromScreen(this.renderer.mousePos);\n                    this.world.onTileClicked(worldPos.floor());\n    \n                    this._lastClickAt = Date.now();\n                }\n            }\n        };\n\n        this.loop.render = (interpolation: number) => {\n            this.renderer.render(this.world);\n\n            if (this.renderer.titleScreen.hidden) {\n                if (this.browser.getParameter('debug')) {\n                    this.browser.renderDebug(this.renderer.camera, this.renderer, this.world);\n                } else {\n                    this.browser.renderStats(this.world);\n                }\n            }\n        };\n\n        this.loop.start();\n    }\n}","export default class Inventory {\n    public wheatSeeds: number = 0;\n    public opium: number = 0;\n    public money: number = 0;\n}","import Inventory from \"./inventory\";\n\nexport default class Player {\n    public readonly items: Inventory = new Inventory();\n\n    constructor () {\n        this.items.wheatSeeds = 50;\n    }\n}","import EmptyTile from '../tiles/empty';\nimport WheatTile from '../tiles/wheat';\nimport Player from \"./player\";\nimport EntityInterface from '../interfaces/entity-interface';\nimport RobotEntity from '../entities/enemies/robot';\nimport Vector from '../core/vector';\nimport Easings from \"../core/easings\";\nimport Tile from '../tiles/tile';\nimport BitMath from '../core/bit-math';\n\nexport default class World {\n    public readonly SIZE: number = 20   ; // 20x20 world siz\n    public readonly CENTER: Vector = new Vector(this.SIZE/2, this.SIZE/2).floor();\n\n    private _tiles: Tile[][];\n    private _createdAt: number = Date.now();\n    private _player: Player = new Player();\n    private _entities: EntityInterface[] = [];\n    private _plantedTilesPerMin: number[] = [];\n    private _enemyGroupsPerMin: number[] = [];\n\n    get tiles (): Tile[][] {\n        return this._tiles;\n    }\n\n    get createdAt (): number {\n        return this._createdAt;\n    }\n\n    get player (): Player {\n        return this._player;\n    }\n\n    get entities (): EntityInterface[] {\n        return this._entities;\n    }\n\n    get tilesPlantedPerMin (): number {\n        return this._plantedTilesPerMin.length;\n    }\n\n    get enemyGroupsPerMin (): number {\n        return this._enemyGroupsPerMin.length;\n    }\n\n    constructor () {\n        this._tiles = Array(this.SIZE).fill([]).map(() => {\n            return Array(this.SIZE).fill([]).map(() => new EmptyTile());\n        });\n    }\n\n    public isValidTilePos (x: number, y: number): boolean {\n        return this._tiles[y] != null && this._tiles[y][x] != null;\n    }\n\n    public onTileClicked (pos: Vector): void {\n        if (!this.isValidTilePos(pos.x, pos.y)) {\n            return;\n        }\n\n        let newTile: Tile | null = null;\n        const tile = this._tiles[pos.y][pos.x];\n\n        tile.onClicked();\n\n        // Clicked tile is empty\n        if (tile instanceof EmptyTile) {\n            // Player has remaining seeds\n            if (this._player.items.wheatSeeds > 0) {\n                this._player.items.wheatSeeds--;\n\n                // Replace with wheat tile\n                newTile = new WheatTile();\n            }\n        }\n\n        // Clicked tile is wheat\n        if (tile instanceof WheatTile) {\n            // Wheat is fully grown\n            if (tile.growthState >= 1) {\n                let seedDrops: number | null = null;\n\n                // If player has no seeds left, always drop\n                while (seedDrops === null || this._player.items.wheatSeeds + seedDrops === 0) {\n                    seedDrops = tile.dropSeeds()\n                }\n                \n                this._player.items.wheatSeeds += seedDrops;\n                this._player.items.opium += 1;\n\n                // Replace with empty tile\n                newTile = new EmptyTile();\n            }\n        }\n\n        // New tile was created\n        if (newTile !== null) {\n            // Set damage of new tile to damage of old tile\n            newTile.damage = tile.damage;\n\n            // Update world\n            this._tiles[pos.y][pos.x] = newTile;\n\n            // Created tile is not empty\n            if (!(newTile instanceof EmptyTile)) {\n                this._plantedTilesPerMin.push(newTile.timeCreated);\n            }\n        }\n    }\n\n    public getSurroundingTileCoords (v: Vector, radius: number = 1, includeSelf: boolean = true): Vector[] {\n        const tiles: Vector[] = [];\n\n        for (let y = v.y - Math.ceil(radius); y <= v.y + Math.ceil(radius); y++) {\n            if (!this._tiles[y]) {\n                continue;\n            }\n\n            for (let x = v.x - Math.ceil(radius); x <= v.x + Math.ceil(radius); x++) {\n                if (!this._tiles[y][x] || \n                    (x === v.x && y === v.y && !includeSelf) ||\n                    new Vector(v.x - x, v.y - y).length > Math.ceil(radius)) {\n                    continue;\n                }\n\n                tiles.push(new Vector(x, y));\n            }\n        }\n\n        return tiles;\n    }\n\n    public getRandomOutsidePos (): Vector {\n        // Make spawn radius twice the game area's diameter\n        const spawnRadius = this.CENTER.length * 3;\n\n        // Set position randomly around the game area\n        return new Vector(spawnRadius, 0)\n            .rotate(Math.random() * 360)\n            .add(this.CENTER.x, this.CENTER.y);\n    }\n\n    /**\n     * Spawns a robot\n     * \n     * TODO: Make generic\n     * \n     * @param [pos] - Position to spawn enemy at (Randomly computed if not given)\n     * @param randomShift - Vector to randomly shift position by\n     */\n    public spawnEnemy (pos: Vector | null = null, randomShift?: Vector): EntityInterface {\n        // No position given\n        if (pos === null) {\n            pos = this.getRandomOutsidePos();\n        }\n\n        if (randomShift) {\n            const shiftVector = new Vector(\n                Math.random() * randomShift.x,\n                Math.random() * randomShift.y\n            ).rotate(Math.random() * 360);\n\n            pos = pos.add(shiftVector.x, shiftVector.y);\n        }\n\n        const enemy = new RobotEntity(pos.x, pos.y);        \n        this._entities.push(enemy);\n        \n        return enemy;\n    }\n\n    public update (delta: number): void {\n        // Remove old planted tiles\n        this._plantedTilesPerMin = this._plantedTilesPerMin.filter((timeCreated: number) => {\n            return (Date.now() - timeCreated) < 60 * 1000;\n        });\n\n        // Remove old enemy groups \n        this._enemyGroupsPerMin = this._enemyGroupsPerMin.filter((timeCreated: number) => {\n            return (Date.now() - timeCreated) < 60 * 1000;\n        });\n\n        // Iterate through world\n        for (let y = 0; y < this._tiles.length; y++) {\n            for (let x = 0; x < this._tiles[y].length; x++) {\n                // Reduce tile damage based off total heal time\n                this._tiles[y][x].damage -= delta / Tile.DAMAGE_HEAL_TIME;\n            }\n        }\n\n        // Start spawning enemies at more than 50 planted tiles/min\n        // Add an extra enemy for every additional 25 planted tiles/min\n        const enemieGroups = Math.ceil((this.tilesPlantedPerMin - 40) / 10);\n        if (enemieGroups > 0) {\n            // Calculate spawnable enemie groups\n            const spawnableGroupCount = enemieGroups - this.enemyGroupsPerMin;\n\n            if (spawnableGroupCount > 0) {\n                // Create each spawnable enemie group\n                for (let groupIndex = 0; groupIndex < spawnableGroupCount; groupIndex++) {\n                    // Determine random group size\n                    const groupSize = BitMath.floor(Math.random() * 3) + 1;\n                    const spawnPos = this.getRandomOutsidePos();\n\n                    // Create each enemy for set group size\n                    for (let enemyIndex = 0; enemyIndex < groupSize; enemyIndex++) {\n                        const enemy = this.spawnEnemy(spawnPos, new Vector(Math.random() * 3, Math.random() * 3));\n\n                        // Assign random world coordinates as target for spawned enemie\n                        enemy.target =  new Vector(Math.random() * this.SIZE, Math.random() * this.SIZE).floor();\n                    }\n\n                    // Push time enemy group was created at\n                    this._enemyGroupsPerMin.push(Date.now());\n                }\n            }\n        }\n\n        // Iterate existing entities\n        for (const entity of this.entities) {\n            if (entity instanceof RobotEntity) {\n                // Robot is exploding\n                if (entity.hasExploded) {\n                    // Remove this entity from list\n                    this._entities = this._entities.filter((v) => v != entity);\n\n                    const MAX_EXPLOSION_RADIUS = 2;\n\n                    const entityWorldPos = entity.position.floor();\n\n                    // Get coordinates for surrounding tiles\n                    const radius = BitMath.floor(Math.random() * (MAX_EXPLOSION_RADIUS + 1))\n                    const surroundingTileCoords = this.getSurroundingTileCoords(\n                        entityWorldPos, \n                        radius\n                    );\n\n                    // Iterate through surrounding tile coordinates\n                    for (const tilePos of surroundingTileCoords) {\n                        // Calculate distance to surrounding tile\n                        const distance = \n                            tilePos\n                                .add(0.5, 0.5)\n                                .add(\n                                    -(entityWorldPos.x + 0.5), \n                                    -(entityWorldPos.y + 0.5)\n                                ).length;\n\n                        // Calculate damage and restrict to values between 0-1\n                        const damage = 1 - (distance / (MAX_EXPLOSION_RADIUS + 1));\n\n                        const tileDestroyed = Math.random() * MAX_EXPLOSION_RADIUS/(distance + 1) > 0.5;\n                        const existingTile = this._tiles[tilePos.y][tilePos.x];\n\n                        if (tileDestroyed) {\n                            const emptyTile = new EmptyTile();\n\n                            // Add existing damage to new tile\n                            emptyTile.damage = existingTile.damage + damage;\n    \n                            // Update world for tile\n                            this._tiles[tilePos.y][tilePos.x] = emptyTile;\n                        } else {\n                            existingTile.damage = existingTile.damage + damage;\n                        }\n                    }\n                }\n            }\n\n            // Move entity to target\n            if (entity.target !== null) {\n                if (!entity.isMoving) {\n                    entity.isMoving = true;\n                    entity.initialPosition = new Vector(entity.position.x, entity.position.y);\n                }\n    \n                let entitySpeed = entity.speed * (delta/1000);\n                let distance = new Vector(entity.target.x - entity.position.x, entity.target.y - entity.position.y).length;\n    \n                if (distance > 0 && entity.initialPosition) {\n                    const initialDistance = new Vector(entity.target.x - entity.initialPosition.x, entity.target.y - entity.initialPosition.y).length;\n                    const distanceProgress = distance/initialDistance;\n    \n                    entitySpeed = entitySpeed * (1 + 2 * Easings.easeInOutQuart(1 - distanceProgress));\n                }\n    \n                if (distance <= entitySpeed) {\n                    distance = entitySpeed;\n                }\n    \n                entity.position.x += entitySpeed * (entity.target.x - entity.position.x) / distance;\n                entity.position.y += entitySpeed *(entity.target.y - entity.position.y) / distance;\n    \n                if (entity.position.x === entity.target.x && entity.position.y === entity.target.y) {\n                    if (entity instanceof RobotEntity) {\n                        entity.explode();\n                    }\n    \n                    entity.target = null;\n                    entity.isMoving = false;\n                    entity.initialPosition = null;\n                }\n            }\n        }\n    }\n}","export default class BitMath {\n    public static floor (n: number): number {\n      return n << 0\n    }\n    \n    public static round (n: number): number {\n      return (0.5 + n) << 0\n    }\n  \n    public static abs (n: number): number {\n      return (n ^ (n >> 31)) - (n >> 31)\n    }\n}","/**\n * Source: https://easings.net/\n */\n\nexport default class Easings {\n    public static easeInCubic(x: number): number {\n        return x * x * x;\n    }\n\n    public static easeInOutQuart (x: number): number {\n        return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;\n    }\n}","class GameLoop {\n    public simulationStep = 1000 / 60;\n    public frameDelta = 0;\n    public lastFrameTimeMs = 0;\n    public fps = 60;\n    public lastFpsUpdate = 0;\n    public framesThisSecond = 0;\n    public numUpdateSteps = 0;\n    public minFrameDelay = 0;\n    public running = false;\n    public started = false;\n    public panic = false;\n    public rafHandle?: number;\n\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    public begin = (time: number, delta: number): void => {};\n    public end = (fps: number, panic: boolean): void => {};\n    public update = (delta: number): void => {};\n    public render = (interpolation: number): void => {};\n    /* eslint-enable @typescript-eslint/no-empty-function */\n\n    constructor() {\n        this.animate = this.animate.bind(this);\n    }\n\n    get maxAllowedFps(): number {\n        return 1000 / this.minFrameDelay;\n    }\n\n    set maxAllowedFps (fps: number) {\n        if (fps == null) {\n            fps = Infinity;\n        }\n        \n        if (fps === 0) {\n            this.stop();\n        } else {\n            this.minFrameDelay = 1000 / fps;\n        }\n    }\n\n    public resetFrameDelta (): number {\n        const frameDelta = this.frameDelta;\n        this.frameDelta = 0;\n        return frameDelta;\n    }\n\n    public start (): void {\n        if (this.started) {\n            return;\n        }\n        \n        this.started = true;\n        this.rafHandle = requestAnimationFrame((timestamp) => {\n            this.render(1);\n            this.running = true;\n            this.lastFrameTimeMs = timestamp;\n            this.lastFpsUpdate = timestamp;\n            this.framesThisSecond = 0;\n            this.rafHandle = requestAnimationFrame(this.animate);\n        })\n    }\n\n    public stop (): void {\n        this.running = false;\n        this.started = false;\n\n        if (this.rafHandle) {\n            cancelAnimationFrame(this.rafHandle);\n        }\n    }\n\n    public animate (time: number): void {\n        this.rafHandle = requestAnimationFrame(this.animate);\n        if (time < this.lastFrameTimeMs + this.minFrameDelay) {\n            return;\n        }\n\n        this.frameDelta += time - this.lastFrameTimeMs;\n        this.lastFrameTimeMs = time;\n\n        this.begin(time, this.frameDelta);\n\n        if (time > this.lastFpsUpdate + 1000) {\n            this.fps = 0.25 * this.framesThisSecond + 0.75 * this.fps;\n            this.lastFpsUpdate = time;\n            this.framesThisSecond = 0;\n        }\n        ++this.framesThisSecond;\n\n        this.numUpdateSteps = 0;\n        while (this.frameDelta >= this.simulationStep) {\n            this.update(this.simulationStep);\n            this.frameDelta -= this.simulationStep;\n\n            if (++this.numUpdateSteps >= 240) {\n                this.panic = true;\n                break;\n            }\n        }\n\n        this.render(this.frameDelta / this.simulationStep);\n        this.end(this.fps, this.panic);\n\n        this.panic = false;\n    }\n}\n\nexport default GameLoop;","import World from \"../base/world\";\nimport Camera from \"../base/camera\";\nimport EmptyTile from \"../tiles/empty\";\nimport Util from \"./util\";\nimport Vector from \"./vector\";\nimport TitleScreen from \"../title-screen/title-screen\";\nimport BitMath from \"./bit-math\";\n\nexport default class Renderer {\n    public readonly FONT_SIZE = 12;\n    public readonly FONT_EMOJI_SIZE = 16;\n    public readonly SQUARE_SIZE = 32;\n\n    private _canvas: HTMLCanvasElement = document.createElement('canvas');\n    public readonly camera: Camera = new Camera(this.SQUARE_SIZE);\n    public readonly titleScreen: TitleScreen = new TitleScreen();\n\n    public mousePos: Vector = new Vector(0, 0);\n\n    get width (): number {\n        return this._canvas.width;\n    }\n\n    get height (): number {\n        return this._canvas.height;\n    }\n\n    get z (): number {\n        return this.camera.zoomAmount;\n    }\n\n    constructor () {\n        this.setupCanvas();\n    }\n\n    private setupCanvas (): void {\n        this.setToWindowSize();\n\n        window.addEventListener('load', (e) => {\n            this.setToWindowSize();\n        });\n\n        window.addEventListener('resize', (e) => {\n            this.setToWindowSize();\n        });\n\n        document.body.append(this._canvas);\n    }\n\n    private setToWindowSize (): void {\n        this._canvas.width = window.innerWidth;\n        this._canvas.height = window.innerHeight;\n    }\n\n    public paintChar (ctx: CanvasRenderingContext2D, char: string, charColor: string, x: number, y: number, isHover: boolean): void {\n        if (isHover) {\n            ctx.shadowColor = \"white\";\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 0;\n            ctx.shadowBlur = BitMath.floor(5 * this.z);\n        }\n\n        let fontSize = this.FONT_SIZE;\n        let fontFamily = \"Courier New\";\n\n        // Isn't alphanumeric -> must be emoji\n        if (!Util.isAlphaNumeric(char)) {\n            fontSize = this.FONT_EMOJI_SIZE;\n            fontFamily = \"OpenMoji\";\n        }\n\n        const textDrawPos = new Vector(\n            (this.SQUARE_SIZE * x + this.SQUARE_SIZE / 2) * this.z - this.camera.position.x,\n            (this.SQUARE_SIZE * y + this.SQUARE_SIZE / 2) * this.z - this.camera.position.y\n        );\n\n        const fontDrawSize = BitMath.floor(fontSize * this.z);\n\n        ctx.fillStyle = charColor;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = 'middle';\n        ctx.font = `${fontDrawSize}px \"${fontFamily}\"`;\n        ctx.fillText(char, BitMath.floor(textDrawPos.x), BitMath.floor(textDrawPos.y)); \n\n        ctx.shadowBlur = 0;\n    }\n\n    public paintSquare (ctx: CanvasRenderingContext2D, x: number, y: number, isHover: boolean, fillStyle: string, opacity: number = 1, char?: string | null, charColor?: string | null): void {\n        const zoom = this.camera.zoomAmount;\n\n        ctx.globalAlpha = opacity;\n        ctx.fillStyle = fillStyle;\n        ctx.fillRect(\n            this.SQUARE_SIZE * x * zoom - this.camera.position.x, \n            this.SQUARE_SIZE * y * zoom - this.camera.position.y, \n            this.SQUARE_SIZE * zoom, \n            this.SQUARE_SIZE * zoom\n        );\n\n        if (char) {\n            const charFillStyle = charColor ? charColor : 'white';\n            this.paintChar(ctx, char, charFillStyle, x, y, isHover);\n        }\n    }\n\n    public outlineSquare (ctx: CanvasRenderingContext2D, x: number, y: number, borderWidth: number = 1): void {\n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = borderWidth * this.z;\n        ctx.strokeRect(\n            (this.SQUARE_SIZE * x + borderWidth / 2) * this.z - this.camera.position.x, \n            (this.SQUARE_SIZE * y + borderWidth / 2) * this.z - this.camera.position.y, \n            (this.SQUARE_SIZE - borderWidth) * this.z, \n            (this.SQUARE_SIZE - borderWidth) * this.z\n        );\n    }\n\n    public paintProgressBar (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, progress: number, color: string = 'green'): void {\n        ctx.globalAlpha = 0.65;\n\n        ctx.fillStyle = 'white';\n        ctx.fillRect(\n            this.SQUARE_SIZE * x * this.z - this.camera.position.x, \n            this.SQUARE_SIZE * y * this.z - this.camera.position.y, \n            this.SQUARE_SIZE * width * this.z, \n            this.SQUARE_SIZE * height * this.z\n        );\n\n        ctx.fillStyle = color;\n        ctx.fillRect(\n            (this.SQUARE_SIZE * x + 1) * this.z - this.camera.position.x, \n            (this.SQUARE_SIZE * y + 1) * this.z - this.camera.position.y, \n            (this.SQUARE_SIZE * width - 2) * this.z * progress, \n            (this.SQUARE_SIZE * height - 2) * this.z\n        );\n\n        ctx.globalAlpha = 1;\n    }\n\n    public render (world: World): void {\n        const ctx = this._canvas.getContext('2d');\n        if (!ctx) {\n            return;\n        }\n\n        const mouseWorldPos = this.camera.worldPosFromScreen(this.mousePos);\n\n        ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n\n        const xStart = Math.floor(this.camera.position.x / (this.SQUARE_SIZE * this.camera.zoomAmount));\n        const xEnd = Math.ceil((this.camera.position.x + window.innerWidth) / (this.SQUARE_SIZE * this.camera.zoomAmount));\n        const yStart = Math.floor(this.camera.position.y / (this.SQUARE_SIZE * this.camera.zoomAmount));\n        const yEnd = Math.ceil((this.camera.position.y + window.innerHeight) / (this.SQUARE_SIZE * this.camera.zoomAmount));\n\n        // Draw empty squares around world\n        for (let y = yStart; y < yEnd; y++) {\n            for (let x = xStart; x < xEnd; x++) {\n                this.paintSquare(ctx, x, y, false, Util.lightenDarkenColor(EmptyTile.COLOR, 8));\n            }\n        }\n\n        // Draw world itself\n        for (let y = 0; y < world.tiles.length; y++) {\n            for (let x = 0; x < world.tiles[y].length; x++) {\n                ctx.globalAlpha = 1;\n\n                const isHover = BitMath.floor(mouseWorldPos.x) === x && BitMath.floor(mouseWorldPos.y)  === y;\n\n                const tile = world.tiles[y][x];\n                tile.render(this, ctx, x, y, isHover);\n\n                if (isHover) {\n                    this.outlineSquare(ctx, x, y);\n                }\n\n                tile.renderLatest(this, ctx, x, y, isHover);\n            }\n        }\n\n        // Draw entities\n        for (const entity of world.entities) {\n            this.paintChar(ctx, entity.getChar(), 'white', entity.position.x, entity.position.y, false);\n        }\n\n        // Draw title screen\n        this.titleScreen.render(this, ctx);\n    }\n}","export default class Util {\n    private static alphaNumericRegExp = new RegExp(\"[\\\\w ]+\");\n\n  public static isAlphaNumeric (text: string): boolean {\n      return Util.alphaNumericRegExp.test(text);\n  }\n\n  public static leadZeros (value: number | string, size: number): number | string {\n    value = value.toString();\n\n    while (value.length < size) {\n      value = '0' + value;\n    }\n    return value;\n  }\n\n  public static mixColors (color1: string, color2: string, percent: number): string {\n    const red1 = parseInt(color1[1] + color1[2], 16);\n    const green1 = parseInt(color1[3] + color1[4], 16);\n    const blue1 = parseInt(color1[5] + color1[6], 16);\n  \n    const red2 = parseInt(color2[1] + color2[2], 16);\n    const green2 = parseInt(color2[3] + color2[4], 16);\n    const blue2 = parseInt(color2[5] + color2[6], 16);\n  \n    const red = Math.round(Util.mix(red1, red2, percent));\n    const green = Math.round(Util.mix(green1, green2, percent));\n    const blue = Math.round(Util.mix(blue1, blue2, percent));\n  \n    return Util.generateHexFromRGB(red, green, blue);\n  }\n  \n  private static generateHexFromRGB (r: number, g: number, b: number) {\n    let rs = r.toString(16);\n    let gs = g.toString(16);\n    let bs = b.toString(16);\n  \n    while (rs.length < 2) { rs = \"0\" + rs; }\n    while (gs.length < 2) { gs = \"0\" + gs; }\n    while (bs.length < 2) { bs = \"0\" + bs; }\n  \n    return \"#\" + rs + gs + bs;\n  }\n  \n  private static mix (start: number, end: number, percent: number) {\n      return start + ((percent) * (end - start));\n  }\n\n  public static lightenDarkenColor (color: string, amount: number): string {\n        let usePound = false;\n\n        if (color[0] == \"#\") {\n            color = color.slice(1);\n            usePound = true;\n        }\n\n        const num = parseInt(color, 16);\n\n        let r = (num >> 16) + amount;\n\n        if (r > 255) r = 255;\n        else if (r < 0) r = 0;\n\n        let b = ((num >> 8) & 0x00FF) + amount;\n\n        if (b > 255) b = 255;\n        else if  (b < 0) b = 0;\n\n        let g = (num & 0x0000FF) + amount;\n\n        if (g > 255) g = 255;\n        else if  (g < 0) g = 0;\n\n        return (usePound ? \"#\" : \"\") + (g | (b << 8) | (r << 16)).toString(16);\n    }\n}","import BitMath from \"./bit-math\";\n\nexport default class Vector {\n    public x: number;\n    public y: number;\n\n    /**\n     * Retrieve total length\n     * \n     * @returns Total length\n     */\n    get length (): number {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n\n    /**\n     * Constructor\n     * \n     * @param x - Initial x coordinate\n     * @param y - Initial y coordinate\n     */\n    constructor (x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Add to coordinates\n     * \n     * @param x - Added to x coordinate\n     * @param y - Added to y coordinate\n     * @returns Vector with added coordinates\n     */\n    public add (x: number, y: number): Vector {\n        return new Vector(this.x + x, this.y + y)\n    }\n\n    /**\n     * Round off coordinates\n     * \n     * @returns Vector with rounded off coordinates\n     */\n    public floor (): Vector {\n        return new Vector(BitMath.floor(this.x), BitMath.floor(this.y));\n    }\n\n    /**\n     * Rotate clockwise by degrees\n     * \n     * @param deg - Angle in degrees\n     * @returns Rotated vector\n     */\n    public rotate (deg: number): Vector {\n        const rad = -deg * (Math.PI/180);\n\n        const cos = Math.cos(rad);\n        const sin = Math.sin(rad);\n\n        return new Vector(\n            Math.round(10000 * (this.x * cos - this.y * sin)) / 10000, \n            Math.round(10000 * (this.x * sin + this.y * cos)) / 10000\n        );\n    }\n\n    public toString(): string {\n        return `Vector (${this.x}, ${this.y})`;\n    }\n}","import EntityInterface from \"interfaces/entity-interface\";\nimport Vector from \"../../core/vector\";\n\nexport default class RobotEntity implements EntityInterface {\n    public readonly EXPLODE_TIME = 3 * 1000;\n\n    public readonly name: string = 'Robot';\n    public readonly speed: number = 2;\n\n    public position: Vector;\n    public initialPosition: Vector | null = null;\n    public target: Vector | null = null;\n    public isHostile: boolean = true;\n    public isMoving: boolean = false;\n\n    private _explodedAt: number | null = null;\n\n    get explosionProgress (): number {\n        if (this._explodedAt === null) {\n            return 0;\n        }\n        \n        const progress = (Date.now() - this._explodedAt) / this.EXPLODE_TIME;\n        return progress > 1 ? 1 : progress;\n    }\n\n    get hasExploded (): boolean {\n        return this.explosionProgress === 1;\n    }\n\n    constructor (x: number, y: number) {\n        this.position = new Vector(x, y);\n    }\n\n    public getChar (): string {\n        if (this.explosionProgress > 0) {\n            if (this.explosionProgress <= 0.6) {\n                return '💣';\n            }\n\n            if (this.explosionProgress > 0.6 && this.explosionProgress < 0.8) {\n                return '✨';\n            }\n\n            if (this.explosionProgress > 0.8 && this.explosionProgress < 1) {\n                return '💥';\n            }\n\n            if (this.explosionProgress >= 1) {\n                return '🔥';\n            }\n        }\n\n        return '🤖';\n    }\n\n    public explode (): void {\n        this._explodedAt = Date.now();\n    }\n}","import Game from \"./base/game\";\nGame.instance;","import Tile from './tile';\nimport Renderer from '../core/renderer';\n\nexport default class EmptyTile extends Tile {\n    public static readonly COLOR = '#ebb434';\n    public name: string = \"Empty\";\n    public timeCreated: number = Date.now();\n    \n    public getChar (): string | null {\n        return 'x';\n    }\n\n    public getHexColor (): string | null {\n        return this.getDamagedHexColor(EmptyTile.COLOR);\n    }\n\n    public getCharColor (): string | null {\n        return '#666666';\n    }\n\n    public onClicked (): void {\n        // TODO: Implement logic\n    }\n\n    public renderLatest (renderer: Renderer, ctx: CanvasRenderingContext2D, x: number, y: number, isHover: boolean): void {\n        super.renderLatest(renderer, ctx, x, y, isHover);\n    }\n}","import TileInterface from '../interfaces/tile-interface';\nimport Renderer from '../core/renderer';\nimport Util from '../core/util';\n\nexport default class Tile implements TileInterface {\n    public static readonly DAMAGE_HEAL_TIME = 60 * 1000;\n    public static readonly COLOR: string = '';\n\n    public name: string = \"\";\n    public timeCreated: number = Date.now();\n\n    private _damage: number = 0;\n\n    get damage (): number {\n        return this._damage;\n    }\n\n    set damage (amount: number) {\n        this._damage = amount > 1 ? 1 : amount < 0 ? 0 : amount;\n    }\n\n    public hasCollision (): boolean {\n        return false;\n    }\n    \n    public getChar (): string | null {\n        return 'x';\n    }\n\n    public getDamagedHexColor (color: string): string {\n        const lightenDarkenFactor = -(this.damage) * 50;\n        return Util.lightenDarkenColor(color, lightenDarkenFactor);\n    }\n\n    public getHexColor (): string | null {\n        return '#000000';\n    }\n\n    public getCharColor (): string | null {\n        return '#000000';\n    }\n\n    public onClicked (): void {\n        // TODO: Implement logic\n    }\n\n    private paintSquare(renderer: Renderer, ctx: CanvasRenderingContext2D, x: number, y: number, isHover: boolean) {\n        const hexColor = this.getHexColor();\n        if (!hexColor) {\n            return;\n        }\n\n        renderer.paintSquare(ctx, x, y, isHover, hexColor, 1, this.getChar(), this.getCharColor());\n    }\n\n    public render (renderer: Renderer, ctx: CanvasRenderingContext2D, x: number, y: number, isHover: boolean): void {\n        this.paintSquare(renderer, ctx, x, y, isHover);\n    }\n\n    public renderLatest (renderer: Renderer, ctx: CanvasRenderingContext2D, x: number, y: number, isHover: boolean): void {\n        if (isHover && this.damage > 0) {\n            renderer.paintProgressBar(ctx, x + 0.25/2, y + 0.15, 0.75, 0.15, this.damage, 'red');\n        }\n    }\n\n    public update (delta: number): void {\n        // TODO: Implement logic\n    }\n}","import Util from '../core/util';\nimport EmptyTile from './empty';\nimport Renderer from '../core/renderer';\nimport Tile from './tile';\nimport Easings from '../core/easings';\nimport BitMath from '../core/bit-math';\n\nexport default class WheatTile extends Tile {\n    public readonly GROWTH_TIME = 7.5 * 1000;\n    public readonly MIN_SEED_DROP = 0;\n    public readonly MAX_SEED_DROP = 3;\n    private readonly COLOR_GROWN = '#7dbf21';\n\n    public name: string = \"Wheat\";\n\n    get growthState (): number {\n        const growth = (Date.now() - this.timeCreated) / this.GROWTH_TIME;\n        if (growth < 1) {\n            return growth * (1 - this.damage)\n        }\n        return growth > 1 ? 1 : growth;\n    }\n\n    public getChar (): string | null {\n        let char = '🌿';\n\n        if (this.growthState < 0.4) {\n            char = '🌱';\n        }\n\n        if (this.growthState >= 1) {\n            char = '🌾';\n        }\n\n        return char;\n    }\n\n    public getCharColor (): string | null {\n        return '#ffffff';\n    }\n\n    public getHexColor (): string | null { \n        const mixAmount = Easings.easeInCubic(this.growthState);\n        const growthColor = Util.mixColors(EmptyTile.COLOR, this.COLOR_GROWN, mixAmount);\n        return this.getDamagedHexColor(growthColor);\n    }\n\n    public onClicked (): void {\n        // TODO: Implement logic\n    }\n\n    public dropSeeds (): number {\n        return BitMath.floor(Math.random() * (this.MAX_SEED_DROP - this.MIN_SEED_DROP + 1)) + this.MIN_SEED_DROP;\n    }\n\n    public render (renderer: Renderer, ctx: CanvasRenderingContext2D, x: number, y: number, isHover: boolean): void {\n        super.render(renderer, ctx, x, y, isHover);\n    }\n\n    public renderLatest (renderer: Renderer, ctx: CanvasRenderingContext2D, x: number, y: number, isHover: boolean): void {\n        super.renderLatest(renderer, ctx, x, y, isHover);\n\n        if (isHover && this.growthState < 1) {\n            renderer.paintProgressBar(ctx, x + 0.25/2, y + 0.7, 0.75, 0.15, this.growthState);\n        }\n    }\n}","import SlideInterface from \"../interfaces/slide-interface\";\nimport Renderer from \"../core/renderer\";\nimport Util from \"../core/util\";\nimport Vector from \"core/vector\";\n\nexport default class TitleScreenLoadSlide implements SlideInterface {\n    music: HTMLAudioElement;\n\n    constructor () {\n        this.music = new Audio('audio/210107blunt164.ogg');\n        this.music.loop = true;\n    }\n\n    render (renderer: Renderer, ctx: CanvasRenderingContext2D): void {\n        ctx.fillStyle = '#111111';\n        ctx.fillRect(0, 0, renderer.width, renderer.height);\n        \n        ctx.fillStyle = '#f3bc3c';\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = 'middle';\n        ctx.font = `${20 * 1}px \"Courier New\"`;\n\n        ctx.shadowColor = Util.lightenDarkenColor(\"#f3bc3c\", 20);\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.shadowBlur = 7;\n        \n        ctx.fillText(\"Load\".toUpperCase().split('').join(' '), renderer.width/2, renderer.height/2);\n\n        ctx.shadowBlur = 0;\n    }\n\n    update (delta: number): void {\n        // TODO: Implement logic\n    }\n\n    onClick (pos: Vector): void {\n        if (this.music.paused) {\n            this.music.play();\n        }\n    }\n}","import SlideInterface from \"../interfaces/slide-interface\";\nimport Renderer from \"../core/renderer\";\nimport Util from \"../core/util\";\nimport Vector from \"../core/vector\";\n\nexport default class TitleScreenLogoSlide implements SlideInterface {\n\n    private _logo: string[] = [\n        ' __     __     __  __     ______     ______     ______      ______   ______     ______     __    __     ______     ______    ',\n        '/\\\\ \\\\  _ \\\\ \\\\   /\\\\ \\\\_\\\\ \\\\   /\\\\  ___\\\\   /\\\\  __ \\\\   /\\\\__  _\\\\    /\\\\  ___\\\\ /\\\\  __ \\\\   /\\\\  == \\\\   /\\\\ \"-./  \\\\   /\\\\  ___\\\\   /\\\\  == \\\\   ',\n        '\\\\ \\\\ \\\\/ \".\\\\ \\\\  \\\\ \\\\  __ \\\\  \\\\ \\\\  __\\\\   \\\\ \\\\  __ \\\\  \\\\/_/\\\\ \\\\/    \\\\ \\\\  __\\\\ \\\\ \\\\  __ \\\\  \\\\ \\\\  __<   \\\\ \\\\ \\\\-./\\\\ \\\\  \\\\ \\\\  __\\\\   \\\\ \\\\  __<   ',\n        ' \\\\ \\\\__/\".~\\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\    \\\\ \\\\_\\\\     \\\\ \\\\_\\\\    \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\ \\\\_\\\\  \\\\ \\\\_____\\\\  \\\\ \\\\_\\\\ \\\\_\\\\ ',\n        '  \\\\/_/   \\\\/_/   \\\\/_/\\\\/_/   \\\\/_____/   \\\\/_/\\\\/_/     \\\\/_/      \\\\/_/     \\\\/_/\\\\/_/   \\\\/_/ /_/   \\\\/_/  \\\\/_/   \\\\/_____/   \\\\/_/ /_/ '\n    ];\n\n    private _description: string[] = [\n        \"Plant wheat seeds, harvest crops and sell them.\",\n        \"\",\n        \"Avoid robot attacks at all costs.\"\n    ]\n\n    render (renderer: Renderer, ctx: CanvasRenderingContext2D): void {\n        const longestLineWidth = this._logo.reduce((a: string, b: string) => {\n            return a.length > b.length ? a : b;\n        }).length;\n\n        const targetLogoWidth = 0.75;\n        let fontSize = (renderer.width / (20 * longestLineWidth) * 1.65) * targetLogoWidth;\n\n        ctx.fillStyle = '#111111';\n        ctx.fillRect(0, 0, renderer.width, renderer.height);\n        \n        ctx.fillStyle = '#f3bc3c';\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = 'middle';\n        ctx.font = `${20 * fontSize}px \"Courier New\"`;\n\n        ctx.shadowColor = Util.lightenDarkenColor(\"#f3bc3c\", 20);\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        ctx.shadowBlur = 7;\n        \n        const yShift = Math.sin((Date.now() / 1000) % 4) * 20;\n        for (let line = 0; line < this._logo.length; line++) {\n            const lineOffset = 20 * fontSize * (line - this._logo.length);\n            ctx.fillText(this._logo[line], renderer.width/2, renderer.height/2 + lineOffset + yShift)\n        }\n\n        fontSize = 20;\n\n        ctx.textBaseline = 'top';\n        ctx.font = `${fontSize}px \"Courier New\"`;\n        \n        for (let dLine = 0; dLine < this._description.length; dLine++) {\n            const descriptionOffset = 1.5 * fontSize * (dLine + 3);\n            ctx.fillText(this._description[dLine], renderer.width/2, renderer.height/2 + descriptionOffset)\n        }\n\n        ctx.shadowBlur = 0;\n    }\n\n    update (delta: number): void {\n        // TODO: Implement logic\n    }\n\n    onClick (pos: Vector): void {\n        // TODO: Implement logic\n    }\n}","import Renderer from \"../core/renderer\";\nimport SlideInterface from \"../interfaces/slide-interface\";\nimport TitleScreenLogoSlide from \"./title-screen-logo-slide\";\nimport Vector from \"../core/vector\";\nimport TitleScreenLoadSlide from \"./title-screen-load\";\n\nexport default class TitleScreen {\n    private _hidden: boolean = false;\n    private _slideId: number = 0;\n    private _slides: SlideInterface[] = [\n        new TitleScreenLoadSlide(),\n        new TitleScreenLogoSlide()\n    ];\n    private _clickedAt: number | null = null;\n\n    get hidden (): boolean {\n        return this._hidden;\n    }\n\n    public onClick (pos: Vector): void {\n        if (this._clickedAt === null) {\n            this._clickedAt = Date.now();\n        }\n\n        this._slides[this._slideId].onClick(pos);\n\n        if (this._slideId + 1 > this._slides.length - 1) {\n            for (const slide of this._slides) {\n                if (slide instanceof TitleScreenLoadSlide) {\n                    slide.music.volume = 0.25;\n                    break;\n                }\n            }\n            this._hidden = true;\n            return;\n        }\n        \n        this._slideId++;\n    }\n\n    public update (delta: number): void {\n        if (this._slides[this._slideId]) {\n            this._slides[this._slideId].update(delta);\n        }\n    }\n    \n    public render (renderer: Renderer, ctx: CanvasRenderingContext2D): void {\n        if (this._hidden) {\n            return;\n        }\n\n        if (this._slides[this._slideId]) {\n            this._slides[this._slideId].render(renderer, ctx);\n        }\n    }\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}